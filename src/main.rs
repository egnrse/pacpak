//! shallow flatpak integration into pacman (rust implementation)
//! (by egnrse)

use clap::Parser;

// read pacman like commnd line arguments
#[derive(Parser)]
#[command(disable_help_flag = true)]
struct Cli {
    /// Operate on the database
    #[arg(short = 'D', long = "database", action = clap::ArgAction::SetTrue)]
	database: bool,
    /// Query the database
    #[arg(short = 'Q', long = "query", action = clap::ArgAction::SetTrue)]
	query: bool,
    /// Remove packages
    #[arg(short = 'R', long = "remove", action = clap::ArgAction::SetTrue)]
	remove: bool,
    /// Synchronize packages
    #[arg(short = 'S', long = "sync", action = clap::ArgAction::SetTrue)]
	sync: bool,
    /// Check dependencies
    #[arg(short = 'T', long = "deptest", action = clap::ArgAction::SetTrue)]
	deptest: bool,
    /// Upgrade or add packages
    #[arg(short = 'U', long = "upgrade", action = clap::ArgAction::SetTrue)]
	upgrade: bool,
    /// Query the files database
    #[arg(short = 'F', long = "files", action = clap::ArgAction::SetTrue)]
	files: bool,
    /// Display version and exit
    #[arg(short = 'V', long = "version", action = clap::ArgAction::SetTrue)]
	version: bool,

    // help gets autogenerated
    #[arg(short = 'h', long = "help", action = clap::ArgAction::SetTrue)]
	help: bool,
    
    /// Display information
    #[arg(short = 'i', long = "info", action = clap::ArgAction::SetTrue)]
	info: bool,
    /// List files
    #[arg(short = 'l', long = "list", action = clap::ArgAction::SetTrue)]
	list: bool,


    /// Targets for operations
    #[arg(value_name = "TARGETS")]
    targets: Option<String>,
}

/// entry point
fn main() {
    let args = Cli::parse();

    if args.help {
        println!("Custom help message");    //dev
        return;
    }
    //TODO Qi / Q

    println!("Hello, world!");
    //println!("pattern: {:?}, path: {:?}", args.pattern, args.path)
}
