//! handling of cli args
// cli.rs

use clap::Parser;		// cli input parser

/// read pacman like command line arguments
#[derive(Parser)]
#[command(
	disable_help_flag = true,
	group(
	clap::ArgGroup::new("operation")
		.args(&["database", "query", "sync", "remove", "deptest", "upgrade", "files", "version", "help"])
		.required(true)
))]
pub struct Cli {
	/// # Operations:
	/// Operate on the database
	#[arg(short = 'D', long = "database", action = clap::ArgAction::SetTrue)]
	pub database: bool,
	/// Query the database
	#[arg(short = 'Q', long = "query", action = clap::ArgAction::SetTrue)]
	pub query: bool,
	/// Remove packages
	#[arg(short = 'R', long = "remove", action = clap::ArgAction::SetTrue)]
	pub remove: bool,
	/// Synchronize packages
	#[arg(short = 'S', long = "sync", action = clap::ArgAction::SetTrue)]
	pub sync: bool,
	/// Check dependencies
	#[arg(short = 'T', long = "deptest", action = clap::ArgAction::SetTrue)]
	pub deptest: bool,
	/// Upgrade or add packages
	#[arg(short = 'U', long = "upgrade", action = clap::ArgAction::SetTrue)]
	pub upgrade: bool,
	/// Query the files database
	#[arg(short = 'F', long = "files", action = clap::ArgAction::SetTrue)]
	pub files: bool,
	/// Display version and exit
	#[arg(short = 'V', long = "version", action = clap::ArgAction::SetTrue)]
	pub version: bool,

	// custom help (autogenerated help is disabled)
	#[arg(short = 'h', long = "help", action = clap::ArgAction::SetTrue)]
	pub help: bool,

	
	/// # Options for operations:
	/// Display information (for a package)
	#[arg(short = 'i', long = "info", action = clap::ArgAction::SetTrue)]
	pub info: bool,
	/// List files (of a package)
	#[arg(short = 'l', long = "list", action = clap::ArgAction::SetTrue)]
	pub list: bool,
	/// Search the package that owns the given file
	#[arg(short = 'o', long = "owns", action = clap::ArgAction::SetTrue)]
	pub owns: bool,
	/// with S/Q: search online/locally; with R: recursive removal
	#[arg(short = 's', long = "search", alias = "recursive", action = clap::ArgAction::SetTrue)]
	pub search: bool,
	#[arg(short = 'r', long = "root", value_name = "ROOT")]
	pub install_root: Option<String>,
	
	//dev: more to add
	
	/// the remote for flatpak operations (eg. flathub)
	#[arg(long = "remote", value_name = "REMOTE")]
	pub remote: Option<String>,


	/// Targets for operations
	#[arg(value_name = "TARGETS")]
	pub targets: Vec<String>,
}
